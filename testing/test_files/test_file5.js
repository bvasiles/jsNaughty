/*
 * File: app/controller/CustomerProperties.js
 *
 * This file was generated by Sencha Designer version 2.0.0.
 * http://www.sencha.com/products/designer/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Designer does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.CustomerProperties', {
    extend: 'Ext.app.Controller',
    alias: 'controller.customerproperties',

    stores: [
        'Customers'
    ],
    views: [
        'CustomerProperties'
    ]
,

    onOkClick: function(button, e, options) {
        var win = button.up('window');
        frm = win.down('form').getForm();
        var store = this.getCustomersStore();    
        if(mode=="Insert") {
            customer = frm.getValues();
            store.insert(0, customer);
        }
        else
        { 
            customer = frm.getRecord();
            frm.updateRecord(customer);
        }
        store.sync();
        win.destroy();
    },

    onCancelClick: function(button, e, options) {
        button.up('window').destroy();
    },

    edit: function(customer, grid) {
        // create an instance of CustomerProperties form
        var cp = Ext.create('MyApp.view.CustomerProperties', {});

        cp.down('form').getForm().loadRecord(customer);

        // When the user clicks the Ok button, form's data must be saved,
        // but should it do and Insert or an Update?.
        // to avoid the confusion, I'll create a variable named
        // mode, and assign Update or Insert depending on
        // what function is displaying the form. In this case
        // the function is edit, so, the variable value is Update.

        mode="Update";
        this.getCustomersStore().setGrid(grid);

        // Show the form
        cp.show();
    },

    insert: function(grid) {
        // create an instance of CustomerProperties form
        var cp = Ext.create('MyApp.view.CustomerProperties', {});

        // When the user clicks the Ok button, form's data must be saved,
        // but should it do and Insert or an Update?.
        // to avoid the confusion, I'll create a variable named
        // mode, and assign Update or Insert depending on
        // what function is displaying the form. In this case
        // the function is edit, so, the variable value is Insert.

        mode="Insert";
        this.getCustomersStore().setGrid(grid);

        // Show the form
        cp.show();
    },

    init: function() {
        this.control({
            "button[id=btnOk]": {
                click: this.onOkClick
            },
            "button[id=btnCancel]": {
                click: this.onCancelClick
            }
        });

    },

    onLaunch: function() {

    },

    onControllerClickStub: function() {

    }

});
